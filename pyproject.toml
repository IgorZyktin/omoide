[project]
name = "omoide"
version = "0.3.11"
description = "Web application for image storage and fast search"
authors = [
    { name = "Igor Zyktin", email = "nicord@yandex.ru" },
]
readme = "README.md"
license = { text = "MIT License" }
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.13.3",
    "asyncpg>=0.30.0",
    "httptools>=0.6.4",
    "loguru>=0.7.2",
    "pillow>=11.0.0",
    "psycopg2-binary>=2.9.9",
    "pydantic-settings>=2.5.2",
    "pydantic>=2.9.2",
    "pyexiv2>=2.15.3",
    "pytz>=2024.2",
    "sqlalchemy[asyncio]>=2.0.36",
    "typer>=0.12.5",
    "tzdata>=2024.2",
    "ujson>=5.10.0",
    'uvloop>=0.21.0;platform_system != "Windows"',
    "python-utilz>=0.1.5",
    "setuptools>=77.0.3",
    "ruff>=0.11.2",
    "nano-settings>=0.1.0",
]

[project.optional-dependencies]
web = [
    "bcrypt>=4.2.0",
    "fastapi>=0.115.0",
    "gunicorn>=23.0.0",
    "jinja2>=3.1.4",
    "python-multipart>=0.0.12",
    "uvicorn>=0.31.0",
]
cli = [
    "colorama>=0.4.6",
    "prettytable>=3.11.0",
]

[tool.uv]
dev-dependencies = [
    "coverage>=7.6.1",
    "mypy>=1.11.2",
    "pytest-asyncio>=0.24.0",
    "pytest>=8.3.3",
    "ruff>=0.6.9",
    "types-pytz>=2024.2.0.20241003",
    "types-ujson>=5.10.0.20240515",
    "vulture>=2.13",
]

[tool.ruff]
line-length = 100
target-version = "py312"

lint.select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async - starting from version 0.0.270
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E", # pycodestyle
    "EM", # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # Pylint
    "PLC", # Convention
    "PLE", # Error
    "PLR", # Refactor
    "PLW", # Warning
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]

lint.ignore = [
    "BLE001", # Do not catch blind exception: `Exception`
    "COM812", # Checks for the absence of trailing commas
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D204", # 1 blank line required after class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "ISC001", # Checks for implicitly concatenated strings on a single line
    "PLE1205", # Too many arguments for `logging` format string
    "RUF100", # Unused noqa directive (non-enabled: F401, `F403`)
    "S101", # Use of assert detected
    "S104", # Possible binding to all interfaces
    "S105", # Possible hardcoded password assigned
    "S106", # Possible hardcoded password assigned
    "S311", # Standard pseudo-random generators for cryptographic purposes
    "S324", # Probable use of insecure hash functions
    "SIM108", # Use ternary operator instead of `if`-`else`-block
    "TRY401", # Redundant exception object included in logging.exception call
    "UP040", # Type alias ... uses `TypeAlias` annotation instead of the `type` keyword
]

[tool.ruff.lint.per-file-ignores]
"omoide/tests/*" = [
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "D100", # Missing docstring in public module
    "D103", # Missing docstring in public function
    "EM101", # Exception must not use a string literal
    "PLR2004", # Magic value used in comparison
    "PT001", # Use `@pytest.fixture` over `@pytest.fixture()`
]
"alembic/*" = [
    "INP001", # File ... is part of an implicit namespace package
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation point
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 6

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
exclude = ["^venv"]
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = "omoide.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "omoide.omoide_api.actions.actions_controllers",
    "omoide.omoide_api.browse.browse_controllers",
    "omoide.omoide_api.exif.exif_controllers",
    "omoide.omoide_api.home.home_controllers",
    "omoide.omoide_api.info.info_controllers",
    "omoide.omoide_api.items.item_controllers",
    "omoide.omoide_api.metainfo.metainfo_controllers",
    "omoide.omoide_api.search.search_controllers",
    "omoide.omoide_app.search.search_controllers",
    "omoide.omoide_api.users.user_controllers",
    "omoide.omoide_app.auth.auth_controllers",
    "omoide.omoide_app.browse.browse_controllers",
    "omoide.omoide_app.items.item_controllers",
    "omoide.omoide_app.special.special_controllers",
    "omoide.omoide_app.profile.profile_controllers",
    "omoide.omoide_app.preview.preview_controllers",
    "omoide.omoide_app.upload.upload_controllers",
    "omoide.omoide_app.home.home_controllers",
]
disallow_untyped_defs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
omit = [
    "./etc/*",
    "./venv/*",
]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "pragma\\: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true
